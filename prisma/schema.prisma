datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output   = "/app/generated/prisma-client"
}


model User {
  id         Int          @id @default(autoincrement()) //자동으로 생성되는 id 순차적으로 생성 1 2 순으로
  username   String       @unique
  email      String?      @unique
  password   String?
  phone      String?      @unique
  github_id  String?      @unique
  avater     String?
  created_at DateTime     @default(now()) //now는 생성시 시간을 저장
  update_at  DateTime     @updatedAt //updatedAt 은 업데이트 된 시간 값을 저장
  tokens     SMSToken[]
  products   Product[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
  LiveStream LiveStream[]
  events     Event[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  views       Int      @default(0)
  created_at  DateTime @default(now())
  update_at   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  update_at  DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}

model LiveStream {
  id         Int      @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  image       String
  link        String?
  start_date  DateTime
  end_date    DateTime
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}
