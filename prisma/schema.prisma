datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model User {
  id         Int          @id @default(autoincrement()) //자동으로 생성되는 id 순차적으로 생성 1 2 순으로
  username   String       @unique
  email      String?      @unique
  password   String?
  phone      String?      @unique
  github_id  String?      @unique
  avater     String?
  role       Role         @default(USER) //사용자 역할 (USER, ADMIN)
  created_at DateTime     @default(now()) //now는 생성시 시간을 저장
  update_at  DateTime     @updatedAt //updatedAt 은 업데이트 된 시간 값을 저장
  products   Product[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
  LiveStream LiveStream[]
  events     Event[]
}

model Product {
  id                      Int      @id @default(autoincrement())
  title                   String
  price                   Float
  description             String
  photo                   String   // 기존 필드 유지 (마이그레이션 호환성)
  photos                  String[] // 새로운 여러 이미지 필드
  representativePhotoIndex Int     @default(0) // 대표 이미지 인덱스
  sold                    Boolean  @default(false)
  created_at              DateTime @default(now())
  update_at               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  Int
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  isNotice    Boolean   @default(false) // 공지사항 여부
  created_at  DateTime  @default(now())
  update_at   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  update_at  DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}

model LiveStream {
  id         Int      @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  image       String
  link        String?
  start_date  DateTime
  end_date    DateTime
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

enum Role {
  USER
  ADMIN
}
